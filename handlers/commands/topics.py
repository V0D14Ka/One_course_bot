import io
import os
from typing import Union

import requests
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import MessageCantBeDeleted, CantInitiateConversation, BotBlocked, Unauthorized, \
    MessageNotModified
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv
from googleapiclient.http import MediaIoBaseUpload

from DB.models import Users, Teams
from create_bot import topics_menu, bot
from services.google_api import GoogleAPI
from static import messages
from utils import check_access, check_cancel_update

load_dotenv()


class FSMSetDoc(StatesGroup):
    new_value = State()


async def topics(message: Union[types.CallbackQuery, types.Message]):
    chapters_arr = await GoogleAPI().get_topics()
    markup = await topics_menu.menu_keyboard(chapters_arr)

    if isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫—É—Ä—Å–∞")
        await call.message.edit_reply_markup(markup)

    if isinstance(message, types.Message):
        if await check_access(message) is False:
            return
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫—É—Ä—Å–∞", reply_markup=markup)


async def doc_set(message: types.Message, state: FSMContext, **kwargs):
    async with state.proxy() as data:
        # –ó–∞–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        category = data["category"]
        call = data["call"]
        chapter = data["chapter"]

        if message.document.mime_type in ['application/pdf']:
            if message.document.file_size < 83886080:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                await call.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞üïí")
                await state.finish()
                user = await Users.get(id=message.from_user.id)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
                if not await Teams.exists(admin=user.id):
                    await call.message.edit_text("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã")
                    await message.delete()
                    return

                username = user.study_group + '. ' + user.full_name + '. ' + str(user.id)
                file_info = await bot.get_file(message.document.file_id)

                BOT_TOKEN = os.getenv("TOKEN")
                file_url = f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}'
                response = requests.get(file_url, stream=True)

                folder_id = os.getenv("CHECKPOINTS_FOLDER")
                response = await GoogleAPI().upload(io.BytesIO(response.content).getvalue(), username, folder_id,
                                                   chapter)
                if response != "error":
                    await call.message.edit_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!‚úÖ")
                else:
                    await call.message.edit_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–µ–º —Ä–∞–±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è")

        else:
            await call.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞‚ùå. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            await message.delete()
            return

        await message.delete()
        await state.finish()


async def doc_set_text(message: types.Message, state: FSMContext, **kwargs):
    async with state.proxy() as data:
        # –ó–∞–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        call = data["call"]
        chapter = data["chapter"]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            markup = await topics_menu.checkpoint_info(chapter)
            try:
                info = await GoogleAPI().get_checkpoint(chapter)
                await call.message.edit_text(messages.example_cp % (info[0], info[1], info[2], info[3], info[4]))
                await call.message.edit_reply_markup(markup)
            except MessageNotModified:
                pass
            await message.delete()
            await state.finish()
            return

        try:
            await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
        except MessageNotModified:
            pass

        await message.delete()


async def menu_navigate(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é checkpoint
    """
    # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–ª–±–µ–∫–∞
    current_level = callback_data.get('level')  # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é.
    category = callback_data.get('category')  # –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.
    item_id = callback_data.get('item_id')
    chapter = callback_data.get('chapter')
    theme = callback_data.get('theme')
    choose = callback_data.get('choose')
    upload = callback_data.get('upload')

    # –°–º–æ—Ç—Ä–∏–º –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –≤—ã–∑–≤–∞–Ω
    match current_level:

        case "0":
            await topics(call)

        case "1":
            markup = await topics_menu.choose_category(chapter)
            try:
                await call.message.edit_text(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤ {chapter}?')
                await call.message.edit_reply_markup(markup)
            except MessageNotModified:
                pass

        case "2":
            is_active = await GoogleAPI().is_chapter_active(chapter)
            print(f"Level 2, Chapter: {chapter}, is active :{is_active}")
            if not is_active:
                try:
                    await call.message.edit_text(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å {chapter}')
                    markup = await topics_menu.back_keyboard(chapter, theme, category, level=1)
                    await call.message.edit_reply_markup(markup)
                    return
                except MessageNotModified:
                    pass

            if category == "1":
                themes = await GoogleAPI().get_themes(chapter)
                markup = await topics_menu.choose_theme(chapter, themes)
                try:
                    await call.message.edit_text(f'–¢–µ–º—ã —Ä–∞–∑–¥–µ–ª–∞ {chapter}')
                    await call.message.edit_reply_markup(markup)
                except MessageNotModified:
                    pass

            elif category == "2":
                if await Teams.exists(admin=call.from_user.id):
                    is_lead = True
                else:
                    is_lead = False

                info = await GoogleAPI().get_checkpoint(chapter)
                markup = await topics_menu.checkpoint_info(chapter, is_lead)
                try:
                    info = info[0]
                    await call.message.edit_text(messages.example_cp % (info[0], info[1], info[2], info[3], info[4]))
                    await call.message.edit_reply_markup(markup)
                except MessageNotModified:
                    pass
                except:
                    await call.message.edit_text(f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–¢ {chapter}")
                    await call.message.edit_reply_markup(markup)


            else:
                raise Exception("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        case "3":

            is_active = await GoogleAPI().is_chapter_active(chapter)
            print(f"Level 3, Chapter: {chapter}, is active :{is_active}")
            if not is_active:
                try:
                    await call.message.edit_text(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å {chapter}')
                    markup = await topics_menu.back_keyboard(chapter, theme, category, level=1)
                    await call.message.edit_reply_markup(markup)
                    return
                except MessageNotModified:
                    pass

            if category == "1":
                markup = await topics_menu.theme_info(chapter, theme)
                try:
                    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç —Ç–µ–º—ã:')
                    await call.message.edit_reply_markup(markup)
                except MessageNotModified:
                    pass

            elif category == "2":
                if upload == "1":
                    try:
                        await call.message.edit_text(f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"')
                    except MessageNotModified:
                        pass

                    async with state.proxy() as data:
                        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        data["category"] = category
                        data["call"] = call
                        data["chapter"] = chapter
                        await FSMSetDoc.new_value.set()
                else:
                    info = await GoogleAPI().get_checkpoint(chapter)
                    markup = await topics_menu.back_keyboard(chapter, theme, category, 3)
                    try:
                        await call.message.edit_text(f'{info[-1]}')
                        await call.message.edit_reply_markup(markup)
                    except MessageNotModified:
                        pass

            else:
                raise Exception("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        case "4":

            is_active = await GoogleAPI().is_chapter_active(chapter)
            print(f"Level 4, Chapter: {chapter}, is active :{is_active}")
            if not is_active:
                try:
                    await call.message.edit_text(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å {chapter}')
                    markup = await topics_menu.back_keyboard(chapter, theme, category, level=1)
                    await call.message.edit_reply_markup(markup)
                    return
                except MessageNotModified:
                    pass

            info = await GoogleAPI().get_theme_info(chapter, theme)
            markup = await topics_menu.back_keyboard(chapter, theme, category, 4)
            try:
                print(info, "-", choose)
                await call.message.edit_text(f'{info[int(choose)]}')
                await call.message.edit_reply_markup(markup)
            except MessageNotModified:
                pass


def register_topics_handlers(_dp: Dispatcher):
    _dp.register_message_handler(topics, commands=['topics'])
    _dp.register_message_handler(doc_set, state=FSMSetDoc.new_value, content_types=['document'])
    _dp.register_message_handler(doc_set_text, state=FSMSetDoc.new_value)
    _dp.register_callback_query_handler(menu_navigate, topics_menu.menu_cd.filter(), state=None)
